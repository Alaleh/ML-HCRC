from copy import deepcopy
import numpy as np


def evaluations(x1):
    x = deepcopy(x1)

    for i in range(12):
        if x[i] == 25.0:
            x[i] = 0.8
        elif x[i] == 20.0:
            x[i] = 0.5
        else:
            x[i] = 0.1

    for i in range(12,24):
        x[i] = (x[i] - 40) / (200 - 40)

    # C_1 to C_4 : one of the following values:
    for i in range(24, 28):
        x[i] = (x[i]-4.5)/(22.0 - 4.5)

    # l
    x[28] = (x[28]-0.220) / (4.7 - .220)
    # cpo
    x[29] = (x[29]-500) / (4000 - 500)
    # ramp
    x[30] = (x[30]-200) / (3000 - 200)
    # vref
    x[31] = (x[31] - 550) / (630 - 550)

    return x

def reevaluations(x1):

    x = deepcopy(x1)

    for i in range(12):
        if x[i] > 0.66:
            x[i] = 25.0
        elif x[i] > 0.33:
            x[i] = 20.0
        else:
            x[i] = 15.0

    x[12:24] = np.round(list(40 + np.asarray(x[12:24]) * (200 - 40)))

    # C_1 to C_4 : one of the following values:
    C_values = [4.5, 4.7, 5, 5.6, 6.6, 6.8, 7.5, 8.2, 9.4, 10.0, 12.0, 14.0, 15.0, 17.0, 18.0, 19.0, 20.0, 22.0]

    for i in range(24, 28):
        t = x[i] * (22.0 - 4.5) + 4.5
        for j in range(1, len(C_values)):
            if C_values[j - 1] <= t < C_values[j]:
                if t - C_values[j - 1] > C_values[j] - t:
                    x[i] = C_values[j]
                else:
                    x[i] = C_values[j - 1]

    # l is one of the following:
    l_values = [.220, .240, .250, .270, .300, .330, .360, .390, .400, .420, .470, .500, .530, .560, .590, .600, .620,
                .680, .700, .760, .770, .820, .900, 1, 1.2, 1.5, 1.8, 2.2, 3.3, 4.7]

    t = x[28] * (4.7 - .220) + .220
    for j in range(1, len(l_values)):
        if l_values[j - 1] <= t < l_values[j]:
            if t - l_values[j - 1] > l_values[j] - t:
                x[28] = l_values[j]
            else:
                x[28] = l_values[j - 1]

    # cpo
    x[29] = np.round(500 + np.asarray(x[29]) * (4000 - 500)) // 100.0 * 100.0
    # ramp
    x[30] = np.round(200 + np.asarray(x[30]) * (3000 - 200)) // 20.0 * 20.0
    # vref
    x[31] = np.round(550 + np.asarray(x[31]) * (630 - 550)) // 5.0 * 5.0

    return x

l = [[20,20,20,20,20,20,20,20,20,20,20,20,90,90,90,90,90,90,90,90,90,90,90,90,20,20,20,20,0.36,500,500,600],[20,20,20,20,20,20,20,20,20,20,20,20,40,40,40,40,40,40,40,40,40,40,40,40,20,20,20,20,0.36,500,1000,600]
,[20,20,20,20,20,20,20,20,20,20,20,20,90,90,90,90,90,90,90,90,90,90,90,90,20,20,20,20,0.36,700,800,600]
,[20,20,20,20,20,20,20,20,20,20,20,20,40,40,40,40,40,40,40,40,40,40,40,40,20,20,20,20,1.8,500,1120,600]
,[20,20,20,20,20,20,20,20,20,20,20,20,90,90,90,90,90,90,90,90,90,90,90,90,20,20,20,20,3.3,1700,2000,600]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,20,20,20,20,1.5,1500,1000,575]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,20,20,20,20,1.5,1000,800,575]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,20,20,20,20,1.5,1000,600,575]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,20,20,20,20,1.2,500,600,575]
,[20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,10,10,10,10,2.2,900,1200,595]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,10,10,10,10,1.2,1100,1200,595]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,15,15,15,15,1.2,1000,1100,580]
,[20,20,20,20,20,20,20,20,20,20,20,20,160,160,160,160,160,160,160,160,160,160,160,160,15,15,15,15,1,600,1060,590]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,18,18,18,18,1.5,700,960,585]
,[20,20,20,20,20,20,20,20,20,20,20,20,160,160,160,160,160,160,160,160,160,160,160,160,18,18,18,18,3.3,2400,900,585]
,[20,20,20,20,20,20,20,20,20,20,20,20,160,160,160,160,160,160,160,160,160,160,160,160,18,18,18,18,3.3,2000,1500,575]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,10,10,10,10,2.2,1200,1600,580]
,[20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,12,12,12,12,0.77,600,800,570]
,[20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,6.6,6.6,6.6,6.6,0.77,1200,800,615]
,[20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,8.2,8.2,8.2,8.2,0.62,700,800,605]
,[20,20,20,20,20,20,20,20,20,20,20,20,60,60,60,60,60,60,60,60,60,60,60,60,5.6,5.6,5.6,5.6,0.33,500,700,590]
,[20,20,20,20,20,20,20,20,20,20,20,20,60,60,60,60,60,60,60,60,60,60,60,60,6.6,6.6,6.6,6.6,0.4,500,800,580]
,[20,20,20,20,20,20,20,20,20,20,20,20,70,70,70,70,70,70,70,70,70,70,70,70,8.2,8.2,8.2,8.2,0.68,700,1300,580]
,[20,20,20,20,20,20,20,20,20,20,20,20,70,70,70,70,70,70,70,70,70,70,70,70,8.2,8.2,8.2,8.2,0.9,500,800,570]
,[20,20,20,20,20,20,20,20,20,20,20,20,90,90,90,90,90,90,90,90,90,90,90,90,9.4,9.4,9.4,9.4,1,700,900,570]
,[20,20,20,20,20,20,20,20,20,20,20,20,90,90,90,90,90,90,90,90,90,90,90,90,9.4,9.4,9.4,9.4,1,600,800,570]
,[20,20,20,20,20,20,20,20,20,20,20,20,50,50,50,50,50,50,50,50,50,50,50,50,10,10,10,10,1.8,800,1100,580]
,[20,20,20,20,20,20,20,20,20,20,20,20,50,50,50,50,50,50,50,50,50,50,50,50,10,10,10,10,1.8,1100,1200,590]
,[20,20,20,20,20,20,20,20,20,20,20,20,120,120,120,120,120,120,120,120,120,120,120,120,12,12,12,12,2.2,900,1000,570]
,[20,20,20,20,20,20,20,20,20,20,20,20,140,140,140,140,140,140,140,140,140,140,140,140,17,17,17,17,1.5,600,900,590]
,[20,20,20,20,20,20,20,20,20,20,20,20,140,140,140,140,140,140,140,140,140,140,140,140,22,22,22,22,0.82,700,500,585]
,[20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,5.6,5.6,5.6,5.6,0.82,800,800,585]]

p = [evaluations(i) for i in l]
for i in p:
    print(' '.join([str(p) for p in i]))